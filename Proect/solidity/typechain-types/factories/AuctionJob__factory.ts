/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { AuctionJob, AuctionJobInterface } from "../AuctionJob";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_jobId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_employer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AuctionEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "bidder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BidPlaced",
    type: "event",
  },
  {
    inputs: [],
    name: "auctionEnded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "employer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finalizeAuction",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jobId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "placeBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a7b380380610a7b8339818101604052810190610032919061011a565b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015a565b600080fd5b6000819050919050565b61009981610086565b81146100a457600080fd5b50565b6000815190506100b681610090565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e7826100bc565b9050919050565b6100f7816100dc565b811461010257600080fd5b50565b600081519050610114816100ee565b92915050565b6000806040838503121561013157610130610081565b5b600061013f858286016100a7565b925050602061015085828601610105565b9150509250929050565b610912806101696000396000f3fe60806040526004361061007b5760003560e01c8063c2939d971161004e578063c2939d971461013e578063d57bde7914610169578063ecfc7ecc14610194578063f77282ab1461019e5761007b565b806362ea82db1461008057806386433374146100bd57806391f90157146100e8578063ae200e7914610113575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610634565b6101c9565b6040516100b4919061067a565b60405180910390f35b3480156100c957600080fd5b506100d26101e1565b6040516100df91906106b0565b60405180910390f35b3480156100f457600080fd5b506100fd6101f4565b60405161010a91906106da565b60405180910390f35b34801561011f57600080fd5b5061012861021a565b60405161013591906106da565b60405180910390f35b34801561014a57600080fd5b50610153610240565b604051610160919061067a565b60405180910390f35b34801561017557600080fd5b5061017e610246565b60405161018b919061067a565b60405180910390f35b61019c61024c565b005b3480156101aa57600080fd5b506101b361043a565b6040516101c091906106da565b60405180910390f35b60056020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60035481565b600460009054906101000a900460ff161561029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029390610752565b60405180910390fd5b60035434116102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d7906107e4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051600060405180830381858888f193505050501580156103a0573d6000803e3d6000fd5b505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346003819055503373ffffffffffffffffffffffffffffffffffffffff167f3fabff0a9c3ecd6814702e247fa9733e5d0aa69e3a38590f92cb18f623a2254d34604051610430919061067a565b60405180910390a2565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c390610850565b60405180910390fd5b600460009054906101000a900460ff161561051c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610513906108bc565b60405180910390fd5b6001600460006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda6003546040516105a1919061067a565b60405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610601826105d6565b9050919050565b610611816105f6565b811461061c57600080fd5b50565b60008135905061062e81610608565b92915050565b60006020828403121561064a576106496105d1565b5b60006106588482850161061f565b91505092915050565b6000819050919050565b61067481610661565b82525050565b600060208201905061068f600083018461066b565b92915050565b60008115159050919050565b6106aa81610695565b82525050565b60006020820190506106c560008301846106a1565b92915050565b6106d4816105f6565b82525050565b60006020820190506106ef60008301846106cb565b92915050565b600082825260208201905092915050565b7f41756374696f6e2068617320656e6465642e0000000000000000000000000000600082015250565b600061073c6012836106f5565b915061074782610706565b602082019050919050565b6000602082019050818103600083015261076b8161072f565b9050919050565b7f426964206d75737420626520686967686572207468616e20746865206375727260008201527f656e742068696768657374206269642e00000000000000000000000000000000602082015250565b60006107ce6030836106f5565b91506107d982610772565b604082019050919050565b600060208201905081810360008301526107fd816107c1565b9050919050565b7f4f6e6c792074686520656d706c6f7965722063616e2063616c6c20746869732e600082015250565b600061083a6020836106f5565b915061084582610804565b602082019050919050565b600060208201905081810360008301526108698161082d565b9050919050565b7f41756374696f6e2068617320616c726561647920656e6465642e000000000000600082015250565b60006108a6601a836106f5565b91506108b182610870565b602082019050919050565b600060208201905081810360008301526108d581610899565b905091905056fea2646970667358221220fec6a2444edafbc76615b1c5d6a776852690e9db35624918f1f963efbc0334ec64736f6c634300081b0033";

type AuctionJobConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionJobConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionJob__factory extends ContractFactory {
  constructor(...args: AuctionJobConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _jobId: BigNumberish,
    _employer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_jobId, _employer, overrides || {});
  }
  override deploy(
    _jobId: BigNumberish,
    _employer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_jobId, _employer, overrides || {}) as Promise<
      AuctionJob & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionJob__factory {
    return super.connect(runner) as AuctionJob__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionJobInterface {
    return new Interface(_abi) as AuctionJobInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AuctionJob {
    return new Contract(address, _abi, runner) as unknown as AuctionJob;
  }
}
