/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface JobManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyForJob"
      | "createJob"
      | "jobs"
      | "nextJobId"
      | "takeJob"
      | "userManagement"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "JobApplied" | "JobCreated" | "JobTaken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "applyForJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [string, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userManagement",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userManagement",
    data: BytesLike
  ): Result;
}

export namespace JobAppliedEvent {
  export type InputTuple = [jobId: BigNumberish, applicant: AddressLike];
  export type OutputTuple = [jobId: bigint, applicant: string];
  export interface OutputObject {
    jobId: bigint;
    applicant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    creator: AddressLike,
    description: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    creator: string,
    description: string
  ];
  export interface OutputObject {
    jobId: bigint;
    creator: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobTakenEvent {
  export type InputTuple = [jobId: BigNumberish, taker: AddressLike];
  export type OutputTuple = [jobId: bigint, taker: string];
  export interface OutputObject {
    jobId: bigint;
    taker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobManagement extends BaseContract {
  connect(runner?: ContractRunner | null): JobManagement;
  waitForDeployment(): Promise<this>;

  interface: JobManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyForJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  createJob: TypedContractMethod<
    [
      description: string,
      requiredSkills: string[],
      deadline: string,
      payment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean] & {
        id: bigint;
        description: string;
        deadline: string;
        payment: bigint;
        creator: string;
        isTaken: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  takeJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  userManagement: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyForJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [
      description: string,
      requiredSkills: string[],
      deadline: string,
      payment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean] & {
        id: bigint;
        description: string;
        deadline: string;
        payment: bigint;
        creator: string;
        isTaken: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "takeJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userManagement"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "JobApplied"
  ): TypedContractEvent<
    JobAppliedEvent.InputTuple,
    JobAppliedEvent.OutputTuple,
    JobAppliedEvent.OutputObject
  >;
  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobTaken"
  ): TypedContractEvent<
    JobTakenEvent.InputTuple,
    JobTakenEvent.OutputTuple,
    JobTakenEvent.OutputObject
  >;

  filters: {
    "JobApplied(uint256,address)": TypedContractEvent<
      JobAppliedEvent.InputTuple,
      JobAppliedEvent.OutputTuple,
      JobAppliedEvent.OutputObject
    >;
    JobApplied: TypedContractEvent<
      JobAppliedEvent.InputTuple,
      JobAppliedEvent.OutputTuple,
      JobAppliedEvent.OutputObject
    >;

    "JobCreated(uint256,address,string)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobTaken(uint256,address)": TypedContractEvent<
      JobTakenEvent.InputTuple,
      JobTakenEvent.OutputTuple,
      JobTakenEvent.OutputObject
    >;
    JobTaken: TypedContractEvent<
      JobTakenEvent.InputTuple,
      JobTakenEvent.OutputTuple,
      JobTakenEvent.OutputObject
    >;
  };
}
