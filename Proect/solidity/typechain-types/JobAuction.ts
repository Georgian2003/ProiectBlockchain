/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface JobAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionActive"
      | "closeAuction"
      | "getBalance"
      | "highestBid"
      | "highestBidder"
      | "jobOwner"
      | "placeBid"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionClosed" | "NewHighestBid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace AuctionClosedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewHighestBidEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobAuction extends BaseContract {
  connect(runner?: ContractRunner | null): JobAuction;
  waitForDeployment(): Promise<this>;

  interface: JobAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionActive: TypedContractMethod<[], [boolean], "view">;

  closeAuction: TypedContractMethod<[], [void], "nonpayable">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  highestBid: TypedContractMethod<[], [bigint], "view">;

  highestBidder: TypedContractMethod<[], [string], "view">;

  jobOwner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<[], [void], "payable">;

  withdrawFunds: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBidder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jobOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuctionClosed"
  ): TypedContractEvent<
    AuctionClosedEvent.InputTuple,
    AuctionClosedEvent.OutputTuple,
    AuctionClosedEvent.OutputObject
  >;
  getEvent(
    key: "NewHighestBid"
  ): TypedContractEvent<
    NewHighestBidEvent.InputTuple,
    NewHighestBidEvent.OutputTuple,
    NewHighestBidEvent.OutputObject
  >;

  filters: {
    "AuctionClosed(address,uint256)": TypedContractEvent<
      AuctionClosedEvent.InputTuple,
      AuctionClosedEvent.OutputTuple,
      AuctionClosedEvent.OutputObject
    >;
    AuctionClosed: TypedContractEvent<
      AuctionClosedEvent.InputTuple,
      AuctionClosedEvent.OutputTuple,
      AuctionClosedEvent.OutputObject
    >;

    "NewHighestBid(address,uint256)": TypedContractEvent<
      NewHighestBidEvent.InputTuple,
      NewHighestBidEvent.OutputTuple,
      NewHighestBidEvent.OutputObject
    >;
    NewHighestBid: TypedContractEvent<
      NewHighestBidEvent.InputTuple,
      NewHighestBidEvent.OutputTuple,
      NewHighestBidEvent.OutputObject
    >;
  };
}
