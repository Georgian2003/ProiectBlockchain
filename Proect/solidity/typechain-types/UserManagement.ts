/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface UserManagementInterface extends Interface {
  getFunction(
    nameOrSignature: "checkIfRegistered" | "getProfile" | "registerUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Debug" | "ProfileUpdated" | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIfRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, string, string[], string[], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIfRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string, user: AddressLike];
  export type OutputTuple = [message: string, user: string];
  export interface OutputObject {
    message: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    username: string,
    bio: string,
    contact: string
  ];
  export type OutputTuple = [
    user: string,
    username: string,
    bio: string,
    contact: string
  ];
  export interface OutputObject {
    user: string;
    username: string;
    bio: string;
    contact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, username: string];
  export type OutputTuple = [user: string, username: string];
  export interface OutputObject {
    user: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserManagement extends BaseContract {
  connect(runner?: ContractRunner | null): UserManagement;
  waitForDeployment(): Promise<this>;

  interface: UserManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIfRegistered: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  getProfile: TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, string[], string[], string, boolean] & {
        username: string;
        bio: string;
        languages: string[];
        spokenLanguages: string[];
        contact: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  registerUser: TypedContractMethod<
    [
      username: string,
      bio: string,
      languages: string[],
      spokenLanguages: string[],
      contact: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIfRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, string[], string[], string, boolean] & {
        username: string;
        bio: string;
        languages: string[];
        spokenLanguages: string[];
        contact: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [
      username: string,
      bio: string,
      languages: string[],
      spokenLanguages: string[],
      contact: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "Debug(string,address)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "ProfileUpdated(address,string,string,string)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,string)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
