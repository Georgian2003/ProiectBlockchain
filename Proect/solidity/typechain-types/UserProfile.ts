/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace UserProfile {
  export type ProfileStruct = {
    name: string;
    phone: string;
    email: string;
    languages: string[];
    programmingLanguages: string[];
    bio: string;
  };

  export type ProfileStructOutput = [
    name: string,
    phone: string,
    email: string,
    languages: string[],
    programmingLanguages: string[],
    bio: string
  ] & {
    name: string;
    phone: string;
    email: string;
    languages: string[];
    programmingLanguages: string[];
    bio: string;
  };
}

export interface UserProfileInterface extends Interface {
  getFunction(
    nameOrSignature: "getProfile" | "updateProfile"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProfileUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, string, string, string[], string[], string]
  ): string;

  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike, name: string, email: string];
  export type OutputTuple = [user: string, name: string, email: string];
  export interface OutputObject {
    user: string;
    name: string;
    email: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserProfile extends BaseContract {
  connect(runner?: ContractRunner | null): UserProfile;
  waitForDeployment(): Promise<this>;

  interface: UserProfileInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProfile: TypedContractMethod<
    [_user: AddressLike],
    [UserProfile.ProfileStructOutput],
    "view"
  >;

  updateProfile: TypedContractMethod<
    [
      _name: string,
      _phone: string,
      _email: string,
      _languages: string[],
      _programmingLanguages: string[],
      _bio: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [_user: AddressLike],
    [UserProfile.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [
      _name: string,
      _phone: string,
      _email: string,
      _languages: string[],
      _programmingLanguages: string[],
      _bio: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;

  filters: {
    "ProfileUpdated(address,string,string)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
  };
}
