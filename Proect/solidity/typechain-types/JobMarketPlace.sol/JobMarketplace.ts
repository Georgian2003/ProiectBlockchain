/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JobMarketplace {
  export type BidStruct = {
    bidder: AddressLike;
    amount: BigNumberish;
    accepted: boolean;
  };

  export type BidStructOutput = [
    bidder: string,
    amount: bigint,
    accepted: boolean
  ] & { bidder: string; amount: bigint; accepted: boolean };

  export type JobStruct = {
    id: BigNumberish;
    employer: AddressLike;
    description: string;
    budget: BigNumberish;
    isCompleted: boolean;
    bids: JobMarketplace.BidStruct[];
  };

  export type JobStructOutput = [
    id: bigint,
    employer: string,
    description: string,
    budget: bigint,
    isCompleted: boolean,
    bids: JobMarketplace.BidStructOutput[]
  ] & {
    id: bigint;
    employer: string;
    description: string;
    budget: bigint;
    isCompleted: boolean;
    bids: JobMarketplace.BidStructOutput[];
  };
}

export interface JobMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBid"
      | "calculateCommission"
      | "calculateCustomCommission"
      | "commissionPercentage"
      | "getAllJobs"
      | "jobCounter"
      | "jobs"
      | "owner"
      | "placeBid"
      | "postJob"
      | "setCommissionPercentage"
      | "userProfileContract"
      | "withdrawBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidAccepted"
      | "BidPlaced"
      | "BidWithdrawn"
      | "CommissionUpdated"
      | "JobPosted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCommission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCustomCommission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllJobs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "postJob", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCommissionPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfileContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCustomCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllJobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;
}

export namespace BidAcceptedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidWithdrawnEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommissionUpdatedEvent {
  export type InputTuple = [newCommission: BigNumberish];
  export type OutputTuple = [newCommission: bigint];
  export interface OutputObject {
    newCommission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobPostedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    employer: AddressLike,
    budget: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, employer: string, budget: bigint];
  export interface OutputObject {
    jobId: bigint;
    employer: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): JobMarketplace;
  waitForDeployment(): Promise<this>;

  interface: JobMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBid: TypedContractMethod<
    [jobId: BigNumberish, bidIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateCommission: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateCustomCommission: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  commissionPercentage: TypedContractMethod<[], [bigint], "view">;

  getAllJobs: TypedContractMethod<
    [],
    [JobMarketplace.JobStructOutput[]],
    "view"
  >;

  jobCounter: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        id: bigint;
        employer: string;
        description: string;
        budget: bigint;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [jobId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  postJob: TypedContractMethod<[_description: string], [void], "payable">;

  setCommissionPercentage: TypedContractMethod<
    [newPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  userProfileContract: TypedContractMethod<[], [string], "view">;

  withdrawBid: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBid"
  ): TypedContractMethod<
    [jobId: BigNumberish, bidIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateCommission"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCustomCommission"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "commissionPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllJobs"
  ): TypedContractMethod<[], [JobMarketplace.JobStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "jobCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        id: bigint;
        employer: string;
        description: string;
        budget: bigint;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [jobId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postJob"
  ): TypedContractMethod<[_description: string], [void], "payable">;
  getFunction(
    nameOrSignature: "setCommissionPercentage"
  ): TypedContractMethod<[newPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userProfileContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawBid"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BidAccepted"
  ): TypedContractEvent<
    BidAcceptedEvent.InputTuple,
    BidAcceptedEvent.OutputTuple,
    BidAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BidWithdrawn"
  ): TypedContractEvent<
    BidWithdrawnEvent.InputTuple,
    BidWithdrawnEvent.OutputTuple,
    BidWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "CommissionUpdated"
  ): TypedContractEvent<
    CommissionUpdatedEvent.InputTuple,
    CommissionUpdatedEvent.OutputTuple,
    CommissionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JobPosted"
  ): TypedContractEvent<
    JobPostedEvent.InputTuple,
    JobPostedEvent.OutputTuple,
    JobPostedEvent.OutputObject
  >;

  filters: {
    "BidAccepted(uint256,address,uint256)": TypedContractEvent<
      BidAcceptedEvent.InputTuple,
      BidAcceptedEvent.OutputTuple,
      BidAcceptedEvent.OutputObject
    >;
    BidAccepted: TypedContractEvent<
      BidAcceptedEvent.InputTuple,
      BidAcceptedEvent.OutputTuple,
      BidAcceptedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "BidWithdrawn(uint256,address,uint256)": TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;
    BidWithdrawn: TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;

    "CommissionUpdated(uint256)": TypedContractEvent<
      CommissionUpdatedEvent.InputTuple,
      CommissionUpdatedEvent.OutputTuple,
      CommissionUpdatedEvent.OutputObject
    >;
    CommissionUpdated: TypedContractEvent<
      CommissionUpdatedEvent.InputTuple,
      CommissionUpdatedEvent.OutputTuple,
      CommissionUpdatedEvent.OutputObject
    >;

    "JobPosted(uint256,address,uint256)": TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
    JobPosted: TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
  };
}
